snippet rnccf
import React, { PropTypes } from 'react'
import { View, StyleSheet, Text } from 'react-native'

$1.propTypes = {

}

export default function ${1:FunctionName} (props) {
  return (
    <View>
      <Text>
       $1
      </Text>
    </View>
  )
}

const styles = StyleSheet.create({
	$0

})

endsnippet


snippet rnccs
import React, { PropTypes, Component } from 'react'
import { View, Text } from 'react-native'

export default class ${1:ClassName} extends Component {
  static propTypes = {}
  state = {}
  render () {
    return (
      ${0:<View>
        <Text>
          $1
        </Text>
      </View>}
    )
  }
}
endsnippet

snippet duck
const initialState = {}

export default function ${1:FunctionName} (state = initialState, action) {
  switch (action.type) {
    default :
      return state
  }
}
endsnippet

snippet imco
import { connect } from 'react-redux'
$0
endsnippet
snippet exdeco
export default connect(
	mapStateToProps,
	mapDispatchToProps
)($1)
endsnippet
snippet prot
static propTypes = {
	$0
}
endsnippet

snippet maps
function mapStateToProps ({${1:reducerName}}) {
	return {
		$1
	}
}
endsnippet

snippet mapd
function mapDispatchToProps (dispatch) {
	return {
		$1	
	}
}
endsnippet

snippet excon
export default connect(
	mapStateToProps,
	mapDispatchToProps
)(${1:FileName})
endsnippet

snippet imf
import { $1 } from '$2'
endsnippet

snippet imc
import $1 from '$2'
endsnippet

snippet navc
<${1:Component} navigator={navigator} />
endsnippet

snippet ssc
const styles = StyleSheet.create({
	${1:Property:} {
		$0
	}
})
endsnippet

snippet sty
style={{$0}}
endsnippet

snippet con
constructor(props) {
	super(props);
	this.state = {$0};
}
endsnippet


snippet rcf
import React, {Component} from 'react'

export default class $1 extends Component {
    render() {
      return(<p>$1</p>)
    }
  }
endsnippet

snippet ()
${1:nameFunction} = () => {
	
}
endsnippet

snippet "u
"use strict";
endsnippet

snippet f
function $1() {
}
endsnippet

snippet xf
export function $1() {
}
endsnippet

snippet xdf
export default function $1() {
}
endsnippet

snippet conp
console.log(props)
endsnippet
snippet clo
console.log("$1")
endsnippet

snippet view
<View style={styles.$1}></View>
endsnippet

snippet ///
/**
 * $1
 * 
 * @flow
 */
endsnippet

snippet /
//////////////////////////////////////////
endsnippet

snippet //
//////////////////////////////////////////
//	$1
//////////////////////////////////////////
endsnippet

snippet flow
/* @flow */
endsnippet

snippet acc
const $1 = '$1'

export function $2() {
	return {
		type: '$1'
		}
}
	case $1 :
		return {
			...state,
		}
endsnippet

snippet fetch
export function fetch$1() {
  return dispatch => { // return redux-thunk
    dispatch(request$1()) // set state to fetching
    return fetch('<API_ROOT>', {
      method: "GET",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json"
      }
    })
      .then((response) => {
        if (response.ok) {
          return response.json()
        } else {
          return null
        }
        })
      .then((data) => dispatch(receive$1(data)))
      .catch((err) => console.error(err))
  }
}
endsnippet

snippet if
if ($1) {
}
endsnippet

snippet ife
if ($1) {
} else {
}
endsnippet

snippet ifei
if ($1) {
} else if ($2) {
}
endsnippet
