

snippet mex
module.exports = {$0}
endsnippet
snippet sendgrid_mail
const sgMail = require('@sendgrid/mail')
sgMail.setApiKey(process.env.SENDGRID_API_KEY)
const msg = {
  to: 'test@example.com', // Change to your recipient
  from: 'test@example.com', // Change to your verified sender
  subject: 'Sending with SendGrid is Fun',
  text: 'and easy to do anywhere, even with Node.js',
  html: '<strong>and easy to do anywhere, even with Node.js</strong>',
}
sgMail
  .send(msg)
  .then(() => {
    console.log('Email sent')
  })
  .catch((error) => {
    console.error(error)
  })
endsnippet
snippet promise
return new Promise((req,res) => {
		})
endsnippet
snippet controller
class Controller {
  index = (req, res) => {
		$0
  };
}

module.exports = HealthCheckController;
endsnippet
snippet fs
const fs = require('fs');

fs.readFile('${1:path}', 'utf8', function(err, data){
    console.log(data);
});
  
console.log('readFile called');
endsnippet

snippet testskip
test.skip('${1:Title}', () => {
    // ...
});
endsnippet

snippet nextpage
import Head from "next/head";

export default function $1() {
  return (
    <div className="$2">
      <Head>
        <title>${3:Page Title}</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="h-full py-10">
					$0
        </div>
      </Layout>
    </div>
  );
}
endsnippet

snippet test
test('${1:Test Name}', () => {
		const ${1:target} = ${2:new TargetClass()}
		const res = $1${3:.method()}
		expect(res).toBe(${4:true})
});
endsnippet
snippet beforeeach
beforeEach(() => {
	$0
});
endsnippet

snippet aftereach
afterEach(() => {
	$0
});
endsnippet

snippet asynctest
test('${1:Test Name}', async () => {
		const ${1:target} = ${2:new TargetClass()}
		const res = await $1${3:.method()}
		expect(res).toBe(${4:true})
});
endsnippet
snippet map
$1.map(($2) => {
	$0
})
endsnippet
snippet rnccf
/********************************************************
 * ${1:What is this component? What props does it take?} 
${2: *
 * @flow}
 ********************************************************/
import Reactfrom 'react'
import { View, StyleSheet, Text } from 'react-native'


export default function ${1:FunctionName} (props) {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>
       $1
      </Text>
    </View>
  )
}

const styles = StyleSheet.create({
	$0

})

endsnippet


snippet rnccs
/********************************************************
 * ${1:What is this component? What props does it take?} 
${2: *
 * @flow}
 ********************************************************/
import React, {Component} from 'react'
import { View, Text, StyleSheet } from 'react-native'

export default class ${1:ClassName} extends Component {
  constructor(${2:props}) {
		super(props)
	}
  render () {
    return (
      ${0:<View style={styles.container}>
        <Text>
          $1
        </Text>
      </View>}
    )
  }
}
const styles = StyleSheet.create({
	container: {
		flex: 1,
		justifyContent: "center",
		alignItems: "center"
	}
})
endsnippet

snippet rccf
import React from 'react'


export default function ${1:FunctionName} (props) {
  return (
    <div className="$3">
       $1
    </div>
  )
}
endsnippet


snippet rccs
/********************************************************
 * ${1:What is this component? What props does it take?} 
${2: *
 * @flow}
 ********************************************************/

import React, { Component } from 'react'

export default class ${3:ClassName} extends Component {
  constructor(${4:props}) {
		super(props)
		this.state = {
			// set initialState
			// local Class state only
		}
	}
  render () {
    return (
      ${5:<div className="$6">
          $3
      </div>}
    )
  }
}
endsnippet

snippet reducer
/*
	$1
*/
const initialState = {$2}

export default function ${3:reducer} (state = initialState, action) {
  switch (action.type) {
    default :
      return state
  }
}
endsnippet

snippet imco
import { connect } from 'react-redux'
$0
endsnippet
snippet expcon
export default connect(
	mapStateToProps,
	mapDispatchToProps
)($1)
endsnippet
snippet maps
function mapStateToProps ({${1:reducerName}}, {${2:navigator}}) {
	return {
		$1,
		$2
	}
}
endsnippet

snippet mapd
function mapDispatchToProps (dispatch) {
	return {
		${1:propName}: ($3) => dispatch(${2:someFunction}($3)),
	}
}
endsnippet

snippet excon
export default connect(
	mapStateToProps,
	mapDispatchToProps
)(${1:FileName})
endsnippet

snippet imf
import { $1 } from '$2'
endsnippet

snippet imdu
import { $1 } from '~/redux/modules/$2'
endsnippet

snippet imc
import $1 from '$2'
endsnippet

snippet imcon
import { connect } from 'react-redux'
endsnippet

snippet navc
<${1:Component} navigator={navigator} />
endsnippet

snippet ssc
const styles = StyleSheet.create({
	${1:Property:} {
		$0
	}
})
endsnippet

snippet sty
style={{$0}}
endsnippet

snippet con
constructor(props) {
	super(props);
	this.state = {$0};
}
endsnippet


snippet rcf
import React, {Component} from 'react'

export default class $1 extends Component {
    render() {
      return(<p>$1</p>)
    }
  }
endsnippet

snippet ==>
${1:nameFunction} = ($2) => {
	$0
}
endsnippet

snippet ()
($1) => $2
endsnippet

snippet strict
"use strict";
endsnippet

snippet f
function $1() {
	$0
}
endsnippet

snippet xf
export function $1($2) {
	$0
}
endsnippet

snippet xdf
export default function $1() {
}
endsnippet

snippet conp
console.log(props)
endsnippet

snippet clo
console.log($1)
endsnippet

snippet =clo
console.log("============================================")
console.log("=", $1)
console.log("============================================")
endsnippet

snippet ///
/**
 * $1
 * 
 * @flow
 */
endsnippet

snippet /
//////////////////////////////////////////
endsnippet

snippet //
/********************************************************
 * $1
 ********************************************************/
endsnippet

snippet flow
/* @flow */
endsnippet

snippet acc
export const $1 = '$1'

export function ${2:actionCreator}($3) {
	return {
		type: '$1',
		${4:data: {}}
		}
}
	case $1 :
		return {
		...state,
		${5:isFetching: true,}
	}
endsnippet

snippet ()d
($2) => dispatch(${1:someAction}($2))
endsnippet

snippet fetch
export function ${1:fetchPosts}($2) {
  return dispatch => { // return redux-thunk
    dispatch(${3:requestPosts}()) // set state to fetching
    return fetch(${4:API_ROOT}, {
      method: "${5:GET}",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
      },
			${6:body: {
					data: {
						$0
					}
				}
		}})
      .then((response) => {
        if (response.ok) {
          return response.json()
        } else {
          return null
        }
        })
      .then((data) => dispatch(${7:receivePosts}(data)))
      .catch((err) => console.error(err))
  }
}
endsnippet
snippet thunk
export function ${1:fetchPosts}() {
  return dispatch => { // return redux-thunk
    return dispatch(${2:requestPosts}())
      .then((data) => dispatch(${6:receivePosts}(data)))
      .catch((err) => console.error(err))
  }
}
endsnippet

snippet if
if ($1) {
}
endsnippet

snippet ife
if ($1) {
} else {
}
endsnippet

snippet ifei
if ($1) {
} else if ($2) {
}
endsnippet

snippet cdm
componentDidMount() {
	$2
}
endsnippet
snippet cwm
componentWillMount() {
	$2
}
endsnippet
snippet cdu
componentDidUpdate() {
	$2
}
endsnippet
snippet cwu
componentWillUpdate() {
	$2
}
endsnippet

snippet flex1
$1: {
	flex: 1,
	justifyContent: "center",
	alignItems: "center"
}
endsnippet

snippet style
style={styles.$1}
endsnippet

snippet exp
export $1 from './$1/$1'
endsnippet

snippet dimensions
import { dimensions, offsetWidth, offsetHeight } from '~/styles'
endsnippet

snippet top
<TouchableOpacity onPress={($1) => ${2:console.log("onPress")}}>
	$3
</TouchableOpacity>
endsnippet

snippet textinput
<TextInput style={styles.$1}
	onChangeText={($2) => this.setState({$2})}
	value={this.state.$2} />
endsnippet

snippet state
this.state = {
	$1: $2
}
endsnippet
snippet text
<Text style={styles.$1}>$2</Text>
$0
endsnippet

snippet view
<View style={styles.$1}>${2:
} $0
</View>
endsnippet

snippet op
onPress={($1) => ${2:console.log("onPress")}}
endsnippet
snippet oc
onClick={($1) => ${2:console.log("onClick")}}
endsnippet
snippet och
onChange={(e) => ${2:console.log("onClick")}}
endsnippet

snippet btn
<button onClick={($1) => ${2:console.log("button clicked")}} className="${3:btn btn-primary}">$4</button>
endsnippet


snippet api_root
import { API_ROOT, API_VERSION } from '~/config/api'
endsnippet

snippet timeout
setTimeout(() => console.log(), 15)
endsnippet

snippet render
render() {
	return ($0)
}
endsnippet

snippet rcc
/********************************************************
 * ${1:What is this Container? What does it connect?} 
${2: *
 * @flow}
 ********************************************************/

import { connect } from 'react-redux'									// import connect
import { ${3:asyncAction} } from '../modules/$4'		  // import action creators
import ${5:ComponentToConnect} from '../components/$5'						// import component to connect

function mapStateToProps ({$4}, {...props}) {
  return {
    $4,
		...props
  }
}
function mapDispatchToProps (dispatch) {
  return {
    fetch$5: () => dispatch(fetch$5()),
  }
}
export default connect(
  mapStateToProps,
  mapDispatchToProps
)($5)
endsnippet

snippet route
import { injectReducer } from '~/store/reducers'

export default (store) => ({
  path : '$1',

  getChildRoutes(partialNextState, cb) {
    require.ensure([], (require) => {
      cb(null, [
        require('$2'),
      ])
    })
  },

  getComponent (nextState, cb) {
    require.ensure([], (require) => {
      const Counter = require('./containers/${3:container}').default
      const reducer = require('./modules/${4:reducer}').default
      injectReducer(store, { key: '$4', reducer })
      cb(null, Counter)
    }, '$5')
  }
})

endsnippet
snippet prop
${1:propName}={ ${2:value} }
endsnippet

snippet disp
dispatch(${1:actionCreator}($2))
endsnippet

snippet then
.then( ($1) => $2 )
endsnippet

snippet disc
${1:propName}: ($3) => dispatch(${2:actionCreator}($3)),
endsnippet

snippet switch
switch ($1) {
	case $2 :
		return {
			$3
		}

	case $4 :
		return {
			$5
		}
	default :
		return {
			$6
		}
}
endsnippet

snippet cwrp
componentWillReceiveProps () {
	$0
}
endsnippet
snippet schema
import { $1 } from '~/db/schema'
endsnippet

snippet const
const $1 = $0
endsnippet

snippet image
<Image source={require('../../assets/$1')} style={styles.$2} />$0
endsnippet

snippet up
'use strict';

// Build constants
$4

class ${1:ClassName} {
	constructor($2) {
		$3
	}
	run() {

	}
}

module.exports = $1
endsnippet


snippet casperthen
casper.then(function() {
	$0
});
endsnippet

snippet caspercapture
casper.then(function() {
		this.capture("$1", {
		top: $2,
		left: $3,
		width: $4,
		height: $5
				});
});
endsnippet

snippet /*
/*
  $1
*/
endsnippet

#######
# JAKEFILE SNIPPETS
#######


snippet ns
namespace('$1', function() {
	$2
})
endsnippet

snippet task
desc('$1')
task('$2', function($3) {
	$0
})
endsnippet


snippet {?
{${1:state.value.true}
	? $2
	: $3 }
endsnippet

snippet mt
marginTop: $0,
endsnippet

snippet {(
{() => $0
endsnippet

snippet tss
this.setState({$1:$0})
endsnippet

snippet rm
${1:callback}={() => $0}
endsnippet

snippet push
this.props.navigator.push({
  screen: '$1', 
  title: undefined,
  titleImage: require('../../img/my_image.png'),
  passProps: {}, 
  animated: true,
  animationType: 'fade', // slide-horizontal 
  backButtonTitle: undefined, 
  backButtonHidden: false, 
  navigatorStyle: {}, 
  navigatorButtons: {} 
})
endsnippet


#--------------------------------------------------------
# React JSX HTML Snippets
#--------------------------------------------------------

# ----------- Input Section -----------

snippet	inp
<input type="$1" className="$2" onChange={} />
endsnippet

snippet select
<select>
	<option disabled="true" selected="true">$1</option>
	<option>$2</option>
</select>
endsnippet

snippet inpn
<input type="number" min="$1" step="$2" className="$3" onChange={$0} />
endsnippet
snippet inpn
<input type="text" className="$2" onChange={$0} />
endsnippet

snippet inps
<input type="submit" className="$1" />$0
endsnippet

snippet lab
<label>$0</label>
endsnippet


snippet ul
<ul>
	<li></li>
</ul>
endsnippet

#--------------------------------------------------------
# Axios 
#--------------------------------------------------------

snippet axpost
axios({
  method: 'post',
  url: '/user/12345',
  data: {
    firstName: 'Fred',
    lastName: 'Flintstone'
  }
});
endsnippet

#--------------------------------------------------------
# React FLOW 
#--------------------------------------------------------


snippet frccs
import * as React from 'react';

type Props = {
  foo: number,
  bar?: string,
};

class MyComponent extends React.Component<Props> {
  render() {
    this.props.doesNotExist; // Error! You did not define a `doesNotExist` prop.

    return <div>{this.props.bar}</div>;
  }
}

<MyComponent foo={42} />;
endsnippet


snippet container
import {connect} from 'react-redux'; 
import $1 from '../components/$1'

function mapStateToProps({$2}, {...props}) {
  return {
    ...props,
		$2
  };
}
function mapDispatchToProps(dispatch) {
  return {
    dispatch: () => console.log("Hello world") 
  };
}
export default connect(
  mapStateToProps,
  mapDispatchToProps,
)($1);
endsnippet


#=========== PROJECT WORKFLOW =========#

snippet httpservice
import HTTP from '../utils/http'

export default class $1 {
  constructor(token) {
    this.http = new HTTP(token)
  }

  $2() {
    var response = this.http.get($0)
    return response
  }
}
endsnippet



#=== JSX HTML === #

snippet div
<div className="$1">
	$0
</div>
endsnippet

snippet h1
<h1 className="$1">$0</h1>
endsnippet

snippet h2
<h2 className="$1">$0</h2>
endsnippet

snippet h3
<h3 className="$1">$0</h3>
endsnippet

snippet h4
<h4 className="$1">$0</h4>
endsnippet

snippet h5
<h5 className="$1">$0</h5>
endsnippet

snippet h6
<h6 className="$1">$0</h6>
endsnippet

snippet span
<span className="$1">$0</span>
endsnippet

snippet img
<img src="$1" className="$2" />$0
endsnippet

snippet placeh
<img src="https://placehold.it/$1x$2" className="$3" />$0
endsnippet

snippet class
className="$0"
endsnippet

snippet i
<i className="fa fa-$1" />$0
endsnippet

snippet p
<p className="$1">$0</p>
endsnippet

snippet input
<input type="text" className="$1"/>$0
endsnippet

snippet label
<label for="$1" className="$2">$0</label>
endsnippet


#==============


snippet for
for (let item of items) { 
	$0
}
endsnippet


#========== ENV

snippet env
process.env('$1')$0
endsnippet

#========== Bootstrap


snippet row
<div className="row">
	$0
</div>
endsnippet

snippet cont
<div className="container">
	$0
</div>
endsnippet

snippet md2
<div className="col-md-2">
	$0
</div>
endsnippet

snippet md3
<div className="col-md-3">
	$0
</div>
endsnippet

snippet md4
<div className="col-md-4">
	$1
</div>
endsnippet

snippet md5
<div className="col-md-5">
	$0
</div>
endsnippet

snippet md6
<div className="col-md-6">
	$0
</div>
endsnippet

snippet md7
<div className="col-md-7">
	$0
</div>
endsnippet

snippet md8
<div className="col-md-8">
	$0
</div>
endsnippet

snippet md9
<div className="col-md-9">
	$0
</div>
endsnippet

snippet md10
<div className="col-md-10">
	$0
</div>
endsnippet

snippet md12
<div className="col-md-12">
	$0
</div>
endsnippet


snippet row4
<div className="row">
	<div className="col-md-3"></div>
	<div className="col-md-3"></div>
	<div className="col-md-3"></div>
	<div className="col-md-3"></div>
</div>
endsnippet

snippet row2
<div className="row">
	<div className="col-md-6"></div>
	<div className="col-md-6"></div>
</div>
endsnippet


snippet row1
<div className="row">
	<div className="col-md-12"></div>
</div>
endsnippet


snippet table
<table className="table">
	<thead>
		<tr>
			<th>Header</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Col</td>
		</tr>
	</tbody>
</table>
endsnippet

snippet a
<a href="#">$0</a>
endsnippet

snippet tr
<tr>$0</tr>
endsnippet

snippet td
<td>$0</td>
endsnippet

snippet trh
<tr>
	<th>Header</th>
</tr>
endsnippet

snippet ob
onBlur={() => console.log()}
endsnippet

snippet saga
import { FETCH_PROPERTIES_SAGA } from '../actions/properties'
import {call, put, takeEvery} from 'redux-saga/effects';
import {delay} from 'redux-saga';

import { FETCH_PROPERTIES, LOAD_PROPERTIES, FAIL_PROPERTIES } from '../actions/properties'


function* fetchProperties() {
  yield put({type: FETCH_PROPERTIES});
  yield delay(2000)
  if (true) {
  }
  yield put({type: FAIL_PROPERTIES});
}

export function* watchFetchProperties() {
  yield takeEvery(FETCH_PROPERTIES_SAGA, fetchProperties)
}
endsnippet

snippet flex
$1: {
	flex: 1,
	justifyContent: 'center',
	alignItems: 'center',
},
endsnippet

snippet service
const axios = require('axios');

class ${1:ServiceName} {
	// Create an axios instance
  init = () => {
    let client = axios.create({
      baseURL: ${2:https://api.baseurl.com},
      headers: {
        "X-Auth-Token": process.env.TOKEN
      }
    })
    return client
  }

  ${3:route} =  async () => {
    let apiClient = this.init()
    try {
       let res = await apiClient.get("${4:/path}")
       return res.data
    } catch (e) {
      console.log(e)
      return false
    }
  }
}

module.exports = $1 
endsnippet

snippet cf
const $1 = function ($2) {
	$0
}
endsnippet

snippet importlink
import {Link} from 'react-router-dom' 
endsnippet

snippet handleinput
handleInputChange(e) {
	let state = {}
	state[e.target.name] = e.target.value
	this.setState(state)
}
endsnippet

snippet formgroup
<div className="form-group">
	<label for="" className="form-control"></label>
	<input type="text" className="form-control"/>
</div>
endsnippet

snippet formctl
className="form-control"
endsnippet

snippet formcontrol
className="form-control"
endsnippet

snippet link
<Link
	className="$1"
	to={'$2'}>
	$0
</Link>
endsnippet

snippet importaxios
import axios from 'axios';
endsnippet

snippet hr
<hr />
endsnippet

snippet rendercontent
renderContent() {
	return (
		$0
	)
}
endsnippet

snippet jparse
JSON.parse($0)
endsnippet

snippet jstring
JSON.stringify($0)
endsnippet

snippet strong
<strong>$0</strong>
endsnippet

snippet sagaf
export function* $1() {
  yield put({ type: FETCH_$2 });

  let token = arguments[0].token;

  let account = new AccountService();
  let request = yield call(account.getOrders, token);

  if (request.status !== 200) {
    console.log("Request:", request);

    yield put({ type: FAIL_$2, error: request.statusText });
  } else {
    let response = request.data;

    yield put({
      type: LOAD_$2,
      data: {
        orders: response.data.attributes.${2/\w+\s*/\L$0\E/}
      }
    });
  }
}
endsnippet

snippet fore
$1.forEach(($2) => {
	$0
})
endsnippet

snippet i_
import _ from 'lodash'$0
endsnippet

snippet duckmount
this.props.fetch$1();
var match = this.props.match.params.id;

var ${1/.*/\L$0\E/} = new $1Service();
	${1/.*/\L$0\E/}
	.$2(${3:args})
		.then(res => {
				if (res.status !== 200) {
				console.log("Non 200 Code", res);
				this.props.fail$1(res.data);
				} else {
				this.props.load$1(res.data.data);
				}
				})
	.catch(e => {
			console.log("Request Failed:", e);
			this.props.fail$1(e);
			});
endsnippet

snippet duckflf
export const FETCH_${1/\w+\s*/\U$0\E/} = 'FETCH_${1/\w+\s*/\U$0\E/}';
export const LOAD_${1/\w+\s*/\U$0\E/} = 'LOAD_${1/\w+\s*/\U$0\E/}';
export const FAIL_${1/\w+\s*/\U$0\E/} = 'FAIL_${1/\w+\s*/\U$0\E/}';
export function fetch$1() {
  return {
    type: FETCH_${1/\w+\s*/\U$0\E/},
  }
}

export function load$1(data) {
  return {
    type: LOAD_${1/\w+\s*/\U$0\E/},
    data: data
  }
}

export function fail$1(data) {
  return {
    type: FAIL_${1/\w+\s*/\U$0\E/},
    data: data
  }
}
endsnippet
