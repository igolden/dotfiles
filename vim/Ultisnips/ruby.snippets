snippet def
def $1($2)
	$0
end
endsnippet

snippet mailer
class ${1:YourName}Mailer < ApplicationMailer
	$0
end
endsnippet

snippet ENV
ENV['$1']
endsnippet

snippet class
class ${1:ClassName} < ${2:ApplicationController}
end
endsnippet

snippet ###
####################################################
#	$1
####################################################
endsnippet
snippet ####
####################################################
endsnippet

snippet sparams
def ${1:resource}_params
	params.require($2).permit($3)
end
endsnippet

snippet devise_for
devise_for :${1:users}, :controllers => { :${2:registrations} => "${3:users/registrations}"}
endsnippet

snippet constraints
  constraints (-> (r) { r.path_info =~ /${1:v1}/ }) do 
    namespace :${2:v1} do
			$0
    end
  end

endsnippet

snippet get
get "$1", controller: "$2", action: "$3", as: "$4"
endsnippet
snippet post
post "$1", controller: "$2", action: "$3", as: "$4"
endsnippet
snippet put
put "$1", controller: "$2", action: "$3", as: "$4"
endsnippet

snippet module
module $1
	${2:class $3 < $4
	end}
end
endsnippet

snippet par
params['$1']
endsnippet

snippet ===
puts "============================================================"
puts "== $1"
puts "============================================================"
endsnippet

snippet test
describe ${1:Model} do 
	before do
		@$1.new
	end
	describe "$2" do 
		it "$3"
			@$1
		end
	end
end
endsnippet

snippet describe
describe "$1" do
	it "$2" do
		$0
	end
end
endsnippet

snippet htdf
# ${1:function}: ${2:Variable} -> ${3:Primitive}
# consumes: ${4:what are the inputs?}
# produces: ${5:what does the function return?}
# assertions: ${6:what can we asset as true?}

# ${7:stub} # this is the stub

endsnippet
