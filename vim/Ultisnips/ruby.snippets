snippet def
# ${3:Describe the method here..}
${4:# @param argument String}
def $1($2)
	$0
end
endsnippet

snippet ##
##
# ${1:This is where you describe the method}
#
#	${2:args:: a, b}
#
endsnippet

snippet mailer
class ${1:YourName}Mailer < ApplicationMailer
	$0
end
endsnippet

snippet ENV
ENV['$1']
endsnippet

snippet class
class ${1:ClassName} < ${2:ApplicationController}
end
endsnippet

snippet ###
####################################################
#	$1
####################################################
endsnippet
snippet ####
####################################################
endsnippet

snippet sparams
def ${1:resource}_params
	params.require(:$1).permit($2)
end
endsnippet

snippet devise_for
devise_for :${1:users}, :controllers => { :${2:registrations} => "${3:users/registrations}"}
endsnippet

snippet constraints
  constraints (-> (r) { r.path_info =~ /${1:v1}/ }) do 
    namespace :${2:v1} do
			$0
    end
  end

endsnippet

snippet get
get "$1", controller: "$2", action: "$3", as: "$4"
endsnippet
snippet post
post "$1", controller: "$2", action: "$3", as: "$4"
endsnippet
snippet put
put "$1", controller: "$2", action: "$3", as: "$4"
endsnippet

snippet module
module $1
	${2:class $3 < $4
	end}
end
endsnippet

snippet par
params['$1']
endsnippet

snippet ===
puts "============================================================"
puts "== $1"
puts "============================================================"
endsnippet

snippet newtest
describe ${1:Model} do 
	before do
		@$1.new
	end
	describe "$2" do 
		it "$3"
			@$1
		end
	end
end
endsnippet

snippet describe
describe "$1" do
	it "$2" do
		$0
	end
end
endsnippet

snippet htdf
# ${1:function}: ${2:Variable} -> ${3:Primitive}
# consumes: ${4:what are the inputs?}
# produces: ${5:what does the function return?}
# assertions: ${6:what can we asset as true?}

# ${7:stub} # this is the stub

endsnippet

snippet init
def initialize
	$0
end
endsnippet

snippet file
File.open("", "w+") do |f|
	$0
end
endsnippet

snippet each
$1.each do |$2|
	$0
end
endsnippet

snippet test
test "$1" do
	$0
end
endsnippet
snippet setup
def setup
	$0
end
endsnippet
snippet transactional
self.use_transactional_tests = true
endsnippet

snippet //
##############
#
# $1
#
##############
endsnippet

snippet gemfile
source 'https://rubygems.org'

gem '$0'

group :test, :development do
	gem 'bundle-audit'
	gem 'guard'
	gem 'reek'
	gem 'rspec'
	gem 'rspec-retry'
	gem 'rubocop'
end
endsnippet

snippet csv
CSV.open("${1:path/to/file.csv}", "${2:w+}") do |csv|
  csv << [${3:"header1", "header2", "header3", "header4"}]
end
endsnippet

snippet rdoc
# ${1:Oneline explanation}
#
# == Parameters:
# ${2:arg}::
#
# == Returns:

#
endsnippet

snippet validation
class MyValidator < ActiveModel::Validator
  def validate(record)
    unless record.name.starts_with? 'X'
      record.errors[:name] << 'Need a name starting with X please!'
    end
  end
end
endsnippet

snippet model
##
# ${1:Model}
#
# ${2:Description}
#
class $1 < ApplicationRecord
	# Hooks
  ${3:after_initialize :set_default_role, :if => :new_record?}
  # Relationships
  ${4:has_many :objects}
  # Validations
  include ActiveModel::Validations
  ${5:validates_with UserValidator}

  ##
  # BEGIN METHODS
  ##

  private

end
endsnippet

snippet bel
belongs_to :$1
endsnippet

snippet hm
has_many :$1
endsnippet

snippet hmt
has_many :$1, through: $2
endsnippet

snippet ho
has_one :$1
endsnippet

snippet seto
@$1 = $0.find(params[:id])
endsnippet

snippet controller
class WidgetsController < ApplicationController
  before_action :set_widget, only: [:show, :edit, :update, :destroy]

  # GET /widgets
  def index
    @widgets = Widget.all
  end

  # GET /widgets/1
  def show
  end

  # GET /widgets/new
  def new
    @widget = Widget.new
  end

  # GET /widgets/1/edit
  def edit
  end

  # POST /widgets
  def create
    @widget = Widget.new(widget_params)

    if @widget.save
      redirect_to @widget, notice: 'Widget was successfully created.'
    else
      render :new
    end
  end

  # PATCH/PUT /widgets/1
  def update
    if @widget.update(widget_params)
      redirect_to @widget, notice: 'Widget was successfully updated.'
    else
      render :edit
    end
  end

  # DELETE /widgets/1
  def destroy
    @widget.destroy
    redirect_to widgets_url, notice: 'Widget was successfully destroyed.'
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_widget
      @widget = Widget.find(params[:id])
    end

    # Only allow a trusted parameter "white list" through.
    def widget_params
      params.require(:widget).permit(:title)
    end
end

endsnippet
