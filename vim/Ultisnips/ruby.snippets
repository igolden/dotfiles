#
# Recent Snippets
# -------------
snippet sftask
require 'pry'
require 'dotenv'
require 'active_record'
require 'yaml'
require_relative '../lib/servus_data_tool'

Dotenv.load

desc '${2:Describe this task}'
task :${1:new_salesforce_task} do
  s1log("[${3:LOG_KEY}][START] - #{DateTime.now}")
  rfclient = Restforce.new(instance_url: 'https://servus.my.salesforce.com')

    # PREPARE QUERIED DATA
    q = <<-QUERY
    SELECT  Id
    FROM ${4:SObject}
    QUERY
    records = rfclient.query(q).to_a

  # SETUP SHEET DATA
  ds = ServusDataTool::DataSource.new
  rows = ds.sc_historical_sheet
  rows.shift # Removes headers


  s1log("$3", "PREFLIGHT", "Preflight Report")
  s1log("$3", "PREFLIGHT", "==================")
  s1log("$3", "PREFLIGHT", "Source: #{records.count} records")
  s1log("$3", "PREFLIGHT", "Target: #{rows.count} rows")
  s1log("$3", "PREFLIGHT", "")
  s1log("$3", "PREFLIGHT", "Source Keys: #{records.first.keys.join('\n')}")
  s1log("$3", "PREFLIGHT", "Target Keys: #{rows.first.keys.join('\n')}")

	matches = 0
	source.each do |srcItem|
		hits = target.filter {|t| t["Tr.#"] == srcItem["Tracking_Number__c"]}
		matches += 1 unless hits.empty?
	end

  s1log("$3", "RESULTS", "Results")
  s1log("$3", "RESULTS", "==================")
  s1log("$3", "RESULTS", "Matches: #{hits.count}")
  s1log("$3", "PREFLIGHT", "")
  s1log("$3", "PREFLIGHT", "Source: #{records.count} records")
  s1log("$3", "PREFLIGHT", "Target: #{rows.count} rows")
  end
end
endsnippet
#
# Good Snippets
# -------------
#
snippet htdf
# ${1:function}: ${2:Variable} -> ${3:Primitive}
# consumes: ${4:what are the inputs?}
# produces: ${5:what does the function return?}
# assertions: ${6:what can we asset as true?}

# ${7:stub} # this is the stub
endsnippet

snippet workspace_new
$1_LOG_PATH="#{ENV['WORKSPACE_$1']}/$2.log"
$1_MANIFEST_PATH="#{ENV['WORKSPACE_$1']}/manifest.yaml"

namespace :$2 do
  logger = Logger.new($1_LOG_PATH)
  
  io = File.read($1_MANIFEST_PATH)
  yaml = YAML.load(io)
  keys = yaml.keys.uniq

  # extract high level keys
  keys.each do |key|
    # access each keys data
    entry = yaml[key]
    #
    # Creates a dynamic task
    #
    desc "Take actions on: #{key}"
    task key do 
      logger.info("Backing up #{entry['path']}")
    end

  end

  task :default do
		pp keys
	end
end


endsnippet


#
# Plain Ruby Snippets
# -------------
#

snippet logger
logger = Logger.new(${1:STDOUT|'file.log'})
logger.warn("UHOH")
endsnippet



#
# File Snippets
# -------------
#
snippet gemfile
source 'https://rubygems.org'

gem '$0'
endsnippet

snippet yaml
io = File.read(${1:path})
yaml = YAML.load(io)
value = yaml['key']
endsnippet


snippet #def
# $1
#
# @params
# @returns
def $2${3:()}
	$0
end
endsnippet

snippet mc
class << self
	def $1
		$0
	end
endsnippet
snippet rdoc
# ${1:Oneline explanation}
#
# == Parameters:
# ${2:arg}::
#
# == Returns:

#
endsnippet

snippet fileread
File.read($1)$0
endsnippet

snippet csv
CSV.open("${1:path/to/file.csv}", "${2:w+}") do |csv|
  csv << [${3:"header1", "header2", "header3", "header4"}]
end
endsnippet

snippet def
def $1($2)
	$0
end
endsnippet
snippet init
def initialize
	$0
end
endsnippet

snippet file
File.open("", "w+") do |f|
	$0
end
endsnippet

snippet list_files_dir
Dir.entries(${1:path}).select { |f| File.file? File.join(${2:path}, f) }
endsnippet

snippet each
$1.each do |$2|
	$0
end
endsnippet




snippet module
module $1
	${2:class $3 < $4
	end}
end
endsnippet


#
#	Testing Snippets
# -------------
#

snippet newtest
describe ${1:Model} do 
	before do
		@$1.new
	end
	describe "$2" do 
		it "$3"
			@$1
		end
	end
end
endsnippet

snippet describe
describe "$1" do
	it "$2" do
		$0
	end
end
endsnippet


snippet test
test "$1" do
	$0
end
endsnippet
snippet setup
def setup
	$0
end
endsnippet

# DEPRECATE
snippet transactional
self.use_transactional_tests = true
endsnippet




snippet spec
require 'spec_helper'
require 'rails_helper'

describe '$1' do
  before do
		$2
  end

  ## Unit Tests
  context 'Unit Tests' do
    it '$3' do
    end
  end
end
endsnippet

snippet expect
expect($1).to eq($2)
endsnippet


snippet rescue
rescue => e
endsnippet

snippet vcr
VCR.use_cassette("$1") do
	$0
end
endsnippet


snippet attribute
attribute :$0
endsnippet

snippet attributedo
attribute :$1 do |obj|
	$0
end
endsnippet

snippet serializer
class $1Serializer
  include FastJsonapi::ObjectSerializer
  attributes :id

  attributes :$2 do |obj|
	$0
  end
end
endsnippet


#
# Rake Snippets
# -------------
#
snippet rakefile
task :$1 do
	$0
end
endsnippet

snippet task
task :$1 do ${2:'|task, args|'}
	$0
end
endsnippet

snippet desc
desc "$0"
endsnippet


snippet namespace
#
# ${1:'Namespace description here'}
#
namespace :$2 do
	task :$3 do |task, args|
		$0
	end

	task :$4 do |task, args|
		$0
	end

	task :$5 do |task, args|
		$0
	end
end
endsnippet

#
# Rails Snippets
# -------------
#
snippet validation
class MyValidator < ActiveModel::Validator
  def validate(record)
    unless record.name.starts_with? 'X'
      record.errors[:name] << 'Need a name starting with X please!'
    end
  end
end
endsnippet

snippet model
class $1 < ActiveRecord::Base
end
endsnippet

snippet factory
FactoryBot.define do
  factory :user do
    first_name "John"
    last_name  "Doe"
    admin false
  end

  # This will use the User class (Admin would have been guessed)
  factory :admin, class: User do
    first_name "Admin"
    last_name  "User"
    admin      true
  end
end
endsnippet
snippet par
params['$1']
endsnippet
snippet mailer
class ${1:YourName}Mailer < ApplicationMailer
	$0
end
endsnippet
snippet get
get "$1", controller: "$2", action: "$3", as: "$4"
endsnippet
snippet post
post "$1", controller: "$2", action: "$3", as: "$4"
endsnippet
snippet put
put "$1", controller: "$2", action: "$3", as: "$4"
endsnippet
snippet sparams
def ${1:resource}_params
	params.require(:$1).permit($2)
end
endsnippet

snippet controller
class ${1:ClassName} < ${2:ApplicationController}
end
endsnippet

snippet devise_for
devise_for :${1:users}, :controllers => { :${2:registrations} => "${3:users/registrations}"}
endsnippet

snippet constraints
  constraints (-> (r) { r.path_info =~ /${1:v1}/ }) do 
    namespace :${2:v1} do
			$0
    end
  end
endsnippet




#
# Misc Snippets
# -------------
#
snippet rrj
Rails.root.join($0)
endsnippet

snippet rr
require_relative '$1'
$0
endsnippet
snippet ##
##
# ${1:This is where you describe the method}
#
#	${2:args:: a, b}
#
endsnippet

snippet #c
##
# ${1:SomeClass}
#
# ${2:Describe the class here..}
#
# ${3:attrs, if any}
#
# see `db/schema` for most accurate attrs

endsnippet

snippet ###
####################################################
#	$1
####################################################
endsnippet

snippet ####
####################################################
endsnippet

# DEPRECATE
snippet transactional
self.use_transactional_tests = true
endsnippet

snippet scaffold
module V1
  class $1sController < BaseController
    skip_before_action :authenticate_token, only: %i[upload]

    # get /account/designs
    def index
      designs = $1.where(user: @current_user)
      render json: $1Serializer.new(designs)
    end

    # get /account/designs/:id
    def show
      design = $1.find(params[:id])
      render json: $1Serializer.new(design)
    end

    # put /account/designs/:id
    def update
      design = $1.find(params[:id])
      if  design.update(design_params)
        render json: $1Serializer.new($1.where(user: @current_user))
      else
        render json: "ERROR", status: 500
      end
    end

    # post /account/designs
    def create
      design = $1.new(design_params)
      design.user = @current_user

      if design.save
        render json: $1Serializer.new($1.where(user: @current_user))
      else
      render json: "ERROR", status: 500
      end
    end

    def destroy
      design = $1.find(params[:id])
      if  design.destroy
        render json: $1Serializer.new($1.where(user: @current_user))
      else
        render json: "ERROR", status: 500
      end
    end

    # FIXME - rename and make this more robust
    # This is the generic uploads action. It creates an unassociated design and lets it float in the ecosystem
    def upload
      if @current_user
        design = $1.new(user: @current_user)
      else
        design = $1.create
      end
      design.files.attach(params['file'])

      render json: $1Serializer.new(design).serializable_hash, status: 200
    end

    private

    def $1_params
      params.require(:$1).permit(:file, :notes, :colors)
    end
  end
end
endsnippet


snippet servustask
desc '$1'
task :$2 do
  ds = ServusDataTool::DataSource.new
  sheet = ds.$3
  sheet.shift

  sheet.each do |row|
    begin
      ServusDataTool::Logger.log("START_$4 - $5")
			$0
      binding.pry
      ServusDataTool::Logger.log("SUCCESS_$4 - $5")
    rescue => e
      ServusDataTool::Logger.error(
        "ERROR_$4 - $5 - #{e.backtrace}"
      )
      Utils.append_to_txt(${6:ID FOR ROW}, '$2')
    end
    sleep(1)
  end
end

endsnippet
