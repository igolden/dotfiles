snippet def
def $1($2)
	$0
end
endsnippet

snippet #*
#==
# $0
#==
endsnippet

snippet mailer
class ${1:YourName}Mailer < ApplicationMailer
	$0
end
endsnippet

snippet ENV
ENV['$1']
endsnippet

snippet class
class ${1:ClassName} < ${2:ApplicationController}
end
endsnippet

snippet ###
####################################################
#	$1
####################################################
endsnippet
snippet ####
####################################################
endsnippet

snippet sparams
def ${1:resource}_params
	params.require(:$1).permit($2)
end
endsnippet

snippet devise_for
devise_for :${1:users}, :controllers => { :${2:registrations} => "${3:users/registrations}"}
endsnippet

snippet constraints
  constraints (-> (r) { r.path_info =~ /${1:v1}/ }) do 
    namespace :${2:v1} do
			$0
    end
  end

endsnippet

snippet gro
get "$1", controller: "$2", action: "$3", as: "$4"
endsnippet
snippet pro
post "$1", controller: "$2", action: "$3", as: "$4"
endsnippet
snippet puro
put "$1", controller: "$2", action: "$3", as: "$4"
endsnippet

snippet module
module $1
	${2:class $3 < $4
	end}
end
endsnippet

snippet par
params['$1']
endsnippet

snippet ===
puts "============================================================"
puts "== $1"
puts "============================================================"
endsnippet

snippet newtest
describe ${1:Model} do 
	before do
		@$1.new
	end
	describe "$2" do 
		it "$3"
			@$1
		end
	end
end
endsnippet


snippet htdf
# ${1:function}: ${2:Variable} -> ${3:Primitive}
# consumes: ${4:what are the inputs?}
# produces: ${5:what does the function return?}
# assertions: ${6:what can we asset as true?}

# ${7:stub} # this is the stub

endsnippet

snippet init
def initialize
	$0
end
endsnippet

snippet file
File.open("", "w+") do |f|
	$0
end
endsnippet

snippet each
$1.each do |$2|
	$0
end
endsnippet

snippet test
test "$1" do
	$0
end
endsnippet
snippet setup
def setup
	$0
end
endsnippet
snippet transactional
self.use_transactional_tests = true
endsnippet

snippet //
##############
#
# $1
#
##############
endsnippet

snippet gemfile
source 'https://rubygems.org'

gem '$0'
endsnippet

snippet csv
CSV.open("${1:path/to/file.csv}", "${2:w+}") do |csv|
  csv << [${3:"header1", "header2", "header3", "header4"}]
end
endsnippet

# TESTS

snippet minitest
require 'minitest/autorun'

class ${1:TestCase} < MiniTest::Test 
	def setup
		$2
	end
end
endsnippet

snippet spec
context "$1" do
	str = "hello_world"
	it { expect(str).to start_with "hello_"}
end
endsnippet

snippet it
it "$1" do
	expect().to be true
end
endsnippet
snippet itt
it "$1" do
	expect($0).to be true
end
endsnippet

snippet itf
it "$1" do
	expect($0).to be false
end
endsnippet

snippet iti
it "$1" do
	expect($2).to include($0)
end
endsnippet

snippet itin
it "$1" do
	expect($2).to be_instance_of($0)
end
endsnippet

snippet nspec
require 'rspec/autorun'
require_relative "../lib/*.rb"

describe "$1" do
  it "$2" do
    $0
  end
end
endsnippet

snippet before
before do 
	$0
end
endsnippet

snippet expect
expect($1).to $0
endsnippet

snippet rakespec
begin
  require 'rspec/core/rake_task'
  RSpec::Core::RakeTask.new(:spec)
rescue LoadError
end
endsnippet

snippet con
context "$1" do 
	it "" do
	end
end
endsnippet
snippet context
context "" do
end
endsnippet

snippet RSpec.describe
RSpec.describe "$1" do 
	context "$2" do
		it "$3" do 
			$0
		end
	end
end
endsnippet

snippet describe
describe "$1"${2:, :type => :feature} do
	it "$3" do
		$0
	end
end
endsnippet

snippet feature
describe "$1", :type => :feature do
	before do 
		$2
	end
	context "$3" do
		it "$4" do
			$0
		end
	end
end
endsnippet

snippet scenario
scenario "$1" do
	$0
end
endsnippet

snippet request
describe "$1", :type => :request do
  fixtures ${2::users}
  before do
		$3
  end
  context "$4" do
    it "$5" do
        $0
    end
  end
end
endsnippet
snippet mspec
describe "$1" do
  ${2:fixtures :users}
  before do 
    $3
  end
  context "$4" do
    it "$5" do
		$0
    end
  end
end
endsnippet


snippet respond_to
respond_to do |format|
	format.html { head :not_found}
	format.json { head :not_found }
	format.xml  { head :not_found }
	format.any  { head :not_found }
end
endsnippet

snippet get
get "$1"${2:, params: \{\}, headers: \{\}}
endsnippet
snippet post
post "$1"${2:, params: \{\}, headers: \{\}}
endsnippet

snippet bp
binding.pry
endsnippet
