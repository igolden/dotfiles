# #import <...>
snippet Imp
	#import <${1:Cocoa/Cocoa.h}>
endsnippet
# #import "..."

snippet imp
	#import "${1:`vim_snippets#Filename()`.h}"
endsnippet
# @selector(...)
snippet sel
	@selector(${1:method}:)
endsnippet
# @"..." string
snippet s
	@"${1}"
endsnippet
# Object
snippet o
	${1:NSObject} *${2:foo} = [${3:$1 alloc}]${4};
endsnippet
# NSLog(...)
snippet log
	NSLog(@"${1:%@}"${2});
endsnippet
# Class
snippet objc
	@interface ${1:`vim_snippets#Filename('', 'someClass')`} : ${2:NSObject}
	{
	}
	@end

	@implementation $1
	${0}
	@end
# Class Interface
endsnippet
snippet int
	@interface ${1:`vim_snippets#Filename('', 'someClass')`} : ${2:NSObject}
	{${3}
	}
	${0}
	@end
snippet @interface
	@interface ${1:`vim_snippets#Filename('', 'someClass')`} : ${2:NSObject}
	{${3}
	}
	${0}
	@end
# Class Implementation
endsnippet
snippet impl
	@implementation ${1:`vim_snippets#Filename('', 'someClass')`}
	${0}
	@end
endsnippet
snippet @implementation
	@implementation ${1:`vim_snippets#Filename('', 'someClass')`}
	${0}
	@end
# Protocol
endsnippet
snippet pro
	@protocol ${1:`vim_snippets#Filename('$1Delegate', 'MyProtocol')`} ${2:<NSObject>}
	${0}
	@end
endsnippet
snippet @protocol
	@protocol ${1:`vim_snippets#Filename('$1Delegate', 'MyProtocol')`} ${2:<NSObject>}
	${0}
	@end
# init Definition
endsnippet
snippet init
	- (id)init
	{
		if (self = [super init]) {
			${0}
		}
		return self;
	}
# dealloc Definition
endsnippet
snippet dealloc
	- (void) dealloc
	{
		${0:deallocations}
		[super dealloc];
	}
endsnippet
snippet su
	[super ${1:init}]
endsnippet
snippet ibo
	IBOutlet ${1:NSSomeClass} *${2:$1};
# Category
endsnippet
snippet cat
	@interface ${1:NSObject} (${2:MyCategory})
	@end

	@implementation $1 ($2)
	${0}
	@end
# Category Interface
endsnippet
snippet cath
	@interface ${1:`vim_snippets#Filename('$1', 'NSObject')`} (${2:MyCategory})
	${0}
	@end
# Method
endsnippet
snippet m
	- (${1:id})${2:method}
	{
		${0}
	}
# Method declaration
endsnippet
snippet md
	- (${1:id})${2:method};
# IBAction declaration
endsnippet
snippet ibad
	- (IBAction)${1:method}:(${2:id})sender;
# IBAction method
endsnippet
snippet iba
	- (IBAction)${1:method}:(${2:id})sender
	{
		${0}
	}
# awakeFromNib method
endsnippet
snippet wake
	- (void)awakeFromNib
	{
		${0}
	}
# Class Method
endsnippet
snippet M
	+ (${1:id})${2:method}
	{
		${0:return nil;}
	}
# Sub-method (Call super)
endsnippet
snippet sm
	- (${1:id})${2:method}
	{
		[super $2];${0}
		return self;
	}
# Accessor Methods For:
# Object
endsnippet
snippet objacc
	- (${1:id})${2:thing}
	{
		return $2;
	}

	- (void)set$2:($1)${3:new$2}
	{
		[$3 retain];
		[$2 release];
		$2 = $3;
	}
# for (object in array)
endsnippet
snippet forin
	for (${1:Class} *${2:some$1} in ${3:array}) {
		${0}
	}
endsnippet
snippet fore
	for (${1:object} in ${2:array}) {
		${0:statements}
	}
endsnippet
snippet forarray
	unsigned int ${1:object}Count = [${2:array} count];

	for (unsigned int index = 0; index < $1Count; index++) {
		${3:id} $1 = [$2 $1AtIndex:index];
		${0}
	}
endsnippet
snippet fora
	unsigned int ${1:object}Count = [${2:array} count];

	for (unsigned int index = 0; index < $1Count; index++) {
		${3:id} $1 = [$2 $1AtIndex:index];
		${0}
	}
# Try / Catch Block
endsnippet
snippet	@try
	@try {
		${1:statements}
	}
	@catch (NSException * e) {
		${2:handler}
	}
	@finally {
		${0:statements}
	}
endsnippet
snippet @catch
	@catch (${1:exception}) {
		${0:handler}
	}
endsnippet
snippet @finally
	@finally {
		${0:statements}
	}
# IBOutlet
# @property (Objective-C 2.0)
endsnippet
snippet prop
	@property (${1:retain}) ${2:NSSomeClass} ${3:*$2};
# @synthesize (Objective-C 2.0)
endsnippet
snippet syn
	@synthesize ${1:property};
# [[ alloc] init]
endsnippet
snippet alloc
	[[${1:foo} alloc] init${2}];
endsnippet
snippet a
	[[${1:foo} alloc] init${2}];
# retain
endsnippet
snippet ret
	[${1:foo} retain];
# release
endsnippet
snippet rel
	[${0:foo} release];
# autorelease
endsnippet
snippet arel
	[${0:foo} autorelease];
# autorelease pool
endsnippet
snippet pool
	NSAutoreleasePool *${1:pool} = [[NSAutoreleasePool alloc] init];
	${0}
	[$1 drain];
# Throw an exception
endsnippet
snippet except
	NSException *${1:badness};
	$1 = [NSException exceptionWithName:@"${2:$1Name}"
	                             reason:@"${0}"
	                           userInfo:nil];
	[$1 raise];
endsnippet
snippet prag
	#pragma mark ${0:-}
endsnippet
snippet cl
	@class ${1:Foo};
endsnippet
snippet color
	[[NSColor ${0:blackColor}] set];
# NSArray
endsnippet
snippet array
	NSMutableArray *${1:array} = [NSMutable array];
endsnippet
snippet nsa
	NSArray ${0}
endsnippet
snippet nsma
	NSMutableArray ${0}
endsnippet
snippet aa
	NSArray * array;
endsnippet
snippet ma
	NSMutableArray * array;
# NSDictionary
endsnippet
snippet dict
	NSMutableDictionary *${1:dict} = [NSMutableDictionary dictionary];
endsnippet
snippet nsd
	NSDictionary ${0}
endsnippet
snippet nsmd
	NSMutableDictionary ${0}
# NSString
endsnippet
snippet nss
	NSString ${0}
endsnippet
snippet nsms
	NSMutableString ${0
endsnippet
